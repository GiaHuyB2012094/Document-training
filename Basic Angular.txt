
- form:
	+ Reactive forms
	+ Template driven forms

- Lazy loading feature modules
- RouterModule
- Data binding 
	+ component (ui logic)
	+ view template (html)
- When initialized then contructor run first, ngOnInit chạy và initialize
các giá trị ban đầu trong component.
- ngOnInit() will be called when all properties of this component initialied

---------------------------------------------------------------------------
- With attribute Disabled, Hidden, Checked --> string interpolation syntax
is not working 
(ex: disabled={{product.inStock > 0}} ==> [disbaled]="product.inStock > 0")
- With attribute in html then need use property binding (ex: bind-value or [value])
- Html attribure ( {{product.name}} ) represents the initial value and it
does not change (aria-hidden, colspan, data-name.v.v) 
- Html property represents the current value and it change
- [attr.aria-hidden] => not error
- Event binding (ex : (click)="incrementProduct()")
---------------------------------------------------------------------------
- Two way data binding is combine of property binding and event binding 
(ex: ([ngModel])="textSearch" ) 
=> to use "ngModel" we need to import "FormsModule"
---------------------------------------------------------------------------
- Directives 
	+ Component directive
	+ Attribute directive : ngStyle, ngClass
	-> used to change the appearance or behavior of a DOM el.
	+ Structural directive : ngIf, ngFor, ngSwitch 
	-> used to add or remove a DOM el on the Website
---------------------------------------------------------------------------
- @Input() => pass val from parent comp to child comp
- @Output() => pass val from child comp to parent comp 
 (variable : EventEmitter<string> = new EvemtEmmiter<string>())
---------------------------------------------------------------------------
- [ngStyle]="{color: prod.is_in_inventory ? 'Green' : 'Red'}" => used to 
set up dynamic CSS with TS expression.
- [ngClass]="{'btn': true, 'btn-search': searchText, 
'btn-search-disabled': !searchText}" ==> used to set up dynamic Class with
Css and TS expression.
---------------------------------------------------------------------------
- Template Reference Variable
	+ <input class"search-input" #searchInput/> => same useRef but nó 
nằm ở template.
-> nó lấy được DOM element, nó chứa tất cả val trong file component.ts 
=> chúng ta có thể reference val trong file componet.ts của nó thông qua
reference variable (ex: #searchInput )

- @ViewChild   ( have 2 argument )
	+ used to query and get a reference of the DOM el in comp. It returns
the first matching el.
	+ lấy nguyên cái DOM từ template đưa qua bên component(logic)
	+ only query and get first matching element
	+ @ViewChild('searchInput', {}) searchInputEl : ElementRef
	+ để lấy giá trị của DOM el (searchInputEl) 
	-> this.searchInputEl.nativeElement.value (này giống event.target.value)

	+ Optional 2nd argument of @ViewChild()(đối số thứ 2 này có thể có hoặc ko)
		1. read: 
		2. static:
			a. true (default) thì lặp tức nó gán DOM el cho biến
			searchInputEl để lấy giá trị DOM khi cần
			b. false sẽ ko lặp tức lấy giá trị mà phải đợi change
			detection cycle
	+ pass val between comp not relation can use @ViewChild.
	
- @ViewChildren (giống @ViewChild nhưng nó returns all the matching element)
	+ @ViewChildren('para') paraEl : QueryList<ElementRef>  
----------------------------------------------------------------------------
- ng-template
- ng-container (không render trực tiếp trong DOM)
	+ can hold structural DOM without add/remove element in DOM
	+ can use 2 or more structural directive trong cùng 1 ng-container
	+ nếu sử dụng *ngFor sẽ lặp và tạo ra các el và các el này để đừng wrap
	bằng thẻ div chứ ko render trực tiếp ra el --> nếu sử dụng ng-container
	thì sẽ render trực tiếp ra el đó lun ko có wrap bằng div
- ng-content (used to render dynamically content that it is pass parent comp to
child comp)
	+ <ng-content select='cái class bên parent comp'><ng-content>
- content projection là cái content nằm trong comp để convert thành <ng-content> 
bên comp con
- @ContentChild (lấy ref của DOM, Comp, Directive của content projection bên cha
đưa qua bên con, nghia là bên con gọi thì sẽ lấy đc ref bên cha truyền qua)
	+ (ex:  @ContentChild('paragrahp') paraEl: ElementRef)

- if we can access a ref of a DOM el from the view template to that component class
then we can use @ViewChild(), if we want access a ref of a DOM el from the parent 
comp to child comp class we use @ContentChild()
- @ContentChild === forwardRef(ReactJS), @ViewChild === useRef(ReactJS)
- @ContentChildren ()
	+ @ContentChildren('para') paraEl : QueryList<ElementRef> 
-----------------------------------------------------------------------------
- Comp Initialization:
	+ contructor() => sẽ đc khởi tạo ngay sau khi this comp đc khởi tạo,
	khi mà contructor đang called thì các val đc pass với @Input từ view 
	template hay comp đều not updated
	+ contructor => called thì sẽ lấy giá trị khởi tạo ban đầu
	==> when angular app start -> first create and render root el comp ->
	creates and render children and their children, form tree comp ->
	when load angular app then check input properties, evaluate the data bindings
	, expressions, render the projected content -> also removes comp from DOM
	when it is longer needed -> event happen, using Angular lifecycle hooks.
- LifeCycle Hooks:
	ngOnChanges -> ngOnInit -> ngDoCheck -> ngAfterContentInit 
	-> ngAfterContentChecked -> ngAfterViewInit -> ngAfterViewChecked 
	-> ngDestroy
	+ chạy theo dạng tree comp (comp cha chỉ start xong roài chạy dô child
	comp, chứ ko chạy các hook methods của cha, chạy hết trong child comp
	roài mới chạy ra mấy hook methods của con.
- mõi hooks phải có implement trong class (ex: export class Demo implement OnChanges, OnInit{})
- ngOnChanges: (giống useEffect(() => {},[data]) bên ReactJS)
	+ nó đc gọi khi the comp rendered in the page (được started) and input properties đc khởi tạo
	+ nó đc called lại mõi khi input properties change
	+ nó còn có thể giúp chúng ta biết đc input properties current and previous bằng cách
	(ex: ngOnChanges(changes: SimpleChanges){})) -> biến changes là object chứa current, previous value.
	+ nó sẽ ko đc gọi lại với input properties có type array, object bởi vì giá trị biến thay đổi chứ
	ref nó có thay đổi đâu mà đổi changes
- ngOnInit: (giống useEffect(() => {},[]) bên ReactJS)
- ngDoCheck: (giống useEffect(()=>{})) nó sẽ called mõi khi bắt cứ cái gì change trong comp
- ngAfterContentInit: nó sẽ called mõi khi projected content được initialized
(chỉ gọi 1 lần)
- ngAfterContentChecked:nó sẽ called and updated after projected content the 
has been checked
- ngAfterViewInit: nó sẽ called mõi khi view has been initialized
	+ called a comp, all the lifecycle hook methods of child comps, directives
	đã completely processed and child comp completely ready.
- ngAfterViewChecked: nó sẽ called and updated after view the has been checked
- ngOnDestroy: 
	+ nó xóa DOM, thực hiện các tác vụ liên quan đến giải phóng tài nguyên
	và tránh rò rỉ bộ nhớ. 
	+ hủy đăng ký Observables, tách trình xử lý sự kiện,...
	+ called right before the comp is destroyed.
-----------------------------------------------------------------------------
- custom attribute directive:
	+ tạo attribute directive (ng generate directive "highlight")
	+ là 1 directive, sử dụng để thay đổi style cho nhiều comp, directive khác
- Renderer2 : ( liên quan đến xử lý, tạo, sửa, xóa các el trong DOM )
	+ allow us to manipulate(tương tác) the DOM without accessing the DOM el directly
	providing a layer of abstraction between DOM el and comp code.
	+ là 1 lớp cơ bản để thực hiện việc tạo, sửa đổi và xóa các phần tử DOM
	+ nó cung cấp 1 abtract class giữ DOM và mã nguồn của comp
	+ sử dụng để thực hiện : tạo phần tử, 
	-> (ex: this.render.setStyle(this.element.nativeElement,'backgroundColor','red'))
	+ các phthuc : createElement(name, namespace), createComment(value), 
	appendChild(parent, newChild), setAttribute(el, name, value, namespace),
	listen(target, eventName, callback), addClass(), removeClass()...
- @HostListener : ( liên quan đến xử lý event của phần tử chủ (host) ) - decorator
	-> (ex :   @HostListener('mouseenter') OnMouseEnter() {
    			this.backgroundColor = 'white'; })
- @HostBinding : ( liên quan đến binding properties của phần tử chủ (host)) - decorator
	+ cho phép liên kết 1 thuộc tính của phẩn từ chủ với một thuộc tính của
	directive or comp
	+ được sử dụng để thay đổi attributes như class, style
	-> (ex: @HostBinding('style.backgroundColor') backgroundColor : string = '#28282B';)
	+ property binding with @HostBinding :
	-> (ex: @HostBinding('value') inputValue: string = 'Hi there')
- property binding in directives : 
	+ truyền val của property từ view to directives.
	+ (ex: [setBackgorund]="{backColor : 'red', textColor: 'white'}")
	+ (ex: [setBackground] [textColor]="'black'")
----------------------------------------------------------------------------
- getter and setter:
	+ getter :	
		. it is a special method in a class that allows access val of private property
		. lấy giá trị của property ko cần directly accessing it.
	+ setter :
		. it is a special method in a class that allows set val of private property
		. to modify val of property ko cần directly assigning it
- conditional attribute directive: 
	+ (ex: [disabledProduct] = 'true' -> @Input() set disbledProduct(disable) {
						if (disable) {this.renderer.addClass(...)}})
---------------------------------------------------------------------------
- view encapsulation :	
	+ angular manages the styles of component to prevent affecting other parts
	+ have three parts:
		. Emulated (Default) --> sử dụng class  (_nghost,_ngcontent,...) hiddened style CSS
		. Shadow DOM
		. None
----------------------------------------------------------------------------
- Dependency Injection:
	+ is a technique (design pattern) using which a class receives its
	dependencies from an external source rather than creating them itself
	+ keeps the code flexible, testable, and mutable
	+ classes can inherit external logic without knowing how to create it.
	+ DI benefits comp, directives and pipes
- Hierarchical Dependency Injection
	+ khi chúng ta khai báo 1 method ở servicies thì khi chúng ta mún cho mấy
	thằng nào use thì tao cho thằng parent (provide: serviceMethod đó) những
	thằng con sẽ đc inject service từ cha cho mấy nó dùng chung và sài (service 1)
	+ còn nếu 2 thằng dù có mqh là cha con thì vẫn sẽ tạo ra 2 service khác nhau
	(service1 và service2) dù cả 2 đều có 1 chức năng.
- Injecting service into another service:	
	+ @Injectable() sử dụng thằng này cho các service cần inject để sử dụng
	method của service kia
- Injection token