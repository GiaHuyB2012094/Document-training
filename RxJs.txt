- Observable:
	+ emitting data -> observer được thông báo là data đó đã streamed
	nhưng lúc này observer chỉ nhận notice thôi chứ chưa làm gì cả, khi nào
	observer này subcribe thì nó mới gets data rồi làm gì đó với data 
	thông qua Handle
	-----------------------------------
	| Observable -> Observer -> Handle |
	-----------------------------------
- Observer:
	+ a set of call back
	+ trong call back có 3 method : next, error, complete
	+ to use the Observable mà nó cần subcribe.
- Operators:
	+ of() -> tạo nhanh Observable (ex: of(this.arr1, this.arr2, 23, 'hello'))
	+ from() -> tạo nhanh Obsevable như chỉ với 1 argument
		 -> convert promise to observable
		(ex: from(this.arr), from('hello') --> [h,e,l,l,o])
	+ map() -> giống map của Array JS
		(ex: myObservable.pipe(map(val => val*5)))
	+ filter() -> giống filter của Array JS
		(ex: myObs.pipe(val => val % 4 === 0)))
	+ pipe() để sử dụng nhiều opeartor
		(ex: filteredObs = this.myObservable.pipe(
    			filter(val => val % 4 == 0),
    			map(val => val*5)))
	+ debounceTime() để đợi sau time thì nó thực hiện, nghĩa là nó đợi time 
		rồi sau đó nó mới emit event
		. sd kỹ thuật debounce của JS
		keyup$.pipe(map((i: any) => i.currentTarget.value),
    			    debounceTime(500)).subscribe(console.log);
	+ switchMap()
	+ startWith() cho phép thêm trước 1 giá trị mặc định hoặc khởi tạo
		to Observable, theemn vào đầu luồng trc khi subcribe.
		(ex: source = of(1, 2, 3); 
		     source.pipe(
  			startWith(0)
			).subscribe(result => console.log(result));) --> 0,1,2,3
		==> make search feature
	+ take(n) lấy ra được n giá trị đã emitted, ngừng việc lấy
	+ distinctUntilChanged () chỉ sẽ filter loại bỏ các giá trị bị trùng(giống)
		. làm đảm bảo các giá trị là unique.
		(ex: const source = from([1, 1, 2, 2, 3, 3, 3, 4, 5]);
			source.pipe(
  			distinctUntilChanged()).subscribe(result => console.log(result));)
		--> Output: 1, 2, 3, 4, 5
	+ merge() merge more obe, combines multiple Observable
		=> make meger message in a chat app	
		(ex: 	const source1 = interval(1000);
			const source2 = interval(500);
			merge(source1, source2).subscribe(result => console.log(result));
	+ concatMap() giúp cho các val được xử lý 1 cách tuần tự, các giá trị
	đó sẽ ko được subscribe to the next observable cho đến khi previous complete
		(ex: 
			//emit delay value
			const source = of(2000, 1000);
			// map value from source into inner observable, when complete emit result and move to next
			const example = source.pipe(
  				concatMap(val => of(`Delayed by: ${val}ms`).pipe(delay(val))));
			//output: With concatMap: Delayed by: 2000ms, With concatMap: Delayed by: 1000ms
			const subscribe = example.subscribe(val =>
  				console.log(`With concatMap: ${val}`));)	
	+ takeUntil() cho phép bạn complete an Observable khi mà another Observable
		emits a value
		(ex : 	const source = interval(1000);
			const stopper = timer(5000);
			source.pipe(
  			  takeUntil(stopper)
			).subscribe(result => console.log(result));
			// Output: 0, 1, 2, 3, 4 )
	+ scan() applies an accumulator func over the values emitted 
		. tính toán giá trị roài emitted val
		(ex: 	const source = from([1, 2, 3, 4, 5]);
			source.pipe(
  				scan((acc, value) => acc + value, 0)
			).subscribe(result => console.log(result));
			// Output: 1, 3, 6, 10, 15 )
----------------------------------------------------------------------------
- Subject ( giống EventEmitters )
	+ is special type of observable
---------------------------------------------------------------------------
- Observable vs Subjects:
	+ 